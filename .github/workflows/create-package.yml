name: Check for New Fika Release

on:
  push:
  schedule:
    - cron: '0 * * * *'  # Runs every hour. Adjust as needed.

jobs:
  check-release:
    runs-on: ubuntu-latest

    outputs:
      status: ${{ steps.compare_release_versions.outputs.new_release }}

    steps:
      - name: Get the Latest Release Info from Fika-Server
        id: get_latest_release_server
        run: |
          latest_release_server=$(curl -s https://api.github.com/repos/project-fika/Fika-Server/releases/latest | jq -r '.tag_name')
          echo "latest_release_server=$latest_release_server" >> $GITHUB_ENV

      - name: Get the Latest Release Info from This Repo
        id: get_latest_release_self
        run: |
          latest_release_self=$(curl -s https://api.github.com/repos/KillahB33/fika-bundle/releases/latest | jq -r '.tag_name')
          echo "latest_release_self=$latest_release_self" >> $GITHUB_ENV

      - name: Compare Release Versions
        id: compare_release_versions
        run: |
          if [ "${{ env.latest_release_server }}" != "${{ env.latest_release_self }}" ]; then
            echo "New Fika-Server release found: ${{ env.latest_release_server }}"
            echo "new_release=true" >> $GITHUB_ENV
            echo "::set-output name=new_release::true"
          else
            echo "No new Fika-Server release."
            echo "new_release=false" >> $GITHUB_ENV
            echo "::set-output name=new_release::false"
          fi

  process-release:
    needs: check-release
    if: needs.check-release.outputs.status == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Get the Latest Release Info from Fika-Plugin
        id: get_latest_release_plugin
        run: |
          latest_release_plugin=$(curl -s https://api.github.com/repos/project-fika/Fika-Plugin/releases/latest | jq -r '.tag_name')
          echo "latest_release_plugin=$latest_release_plugin" >> $GITHUB_ENV

      - name: Prepare Plugin File Name
        id: prepare_plugin_file_name
        run: |
          plugin_file_name=$(echo "${{ env.latest_release_plugin }}" | sed 's/^v//')
          echo "plugin_file_name=Fika.Release.${plugin_file_name}.zip" >> $GITHUB_ENV

      - name: Download Fika-Server Assets
        run: |
          mkdir tmp
          mkdir assets
          curl -L "https://github.com/project-fika/Fika-Server/releases/download/${{ env.latest_release_server }}/fika-server.zip" -o tmp/fika-server.zip

      - name: Download Fika-Plugin Assets
        run: |
          curl -L "https://github.com/project-fika/Fika-Plugin/releases/download/${{ env.latest_release_plugin }}/${{ env.plugin_file_name }}" -o tmp/${{ env.plugin_file_name }}

      - name: Unzip Fika-Server Assets
        run: |
          unzip tmp/fika-server.zip -d assets/

      - name: Unzip Fika-Plugin Assets
        run: |
          unzip tmp/${{ env.plugin_file_name }} -d assets/

      - name: Create zip of all assets
        run: |
          mkdir -p release
          cd assets
          zip -r ../release/fika-bundle.zip ./*

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: ${{ env.latest_release_server }}
          prerelease: false
          name: "Fika Bundle ${{ env.latest_release_server }}"
          files: release/fika-bundle.zip
